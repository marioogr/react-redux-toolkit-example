import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { RootState, AppThunk } from "../../app/store";
import { http } from "../../services/http";

export interface CharacterState {
  characters: any[];
  count: number;
  pages: number;
  next: string | null;
  prev: string | null;
  status: "idle" | "loading" | "failed";
}

const initialState: CharacterState = {
  status: "idle",
  characters: [],
  count: 0,
  pages: 0,
  next: null,
  prev: null,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.

export const getCharactersAsync = createAsyncThunk(
  "character/getCharacters",
  async () => {
    const response = await http.get("/character");
    return response.data;
  }
);
export const characterSlice = createSlice({
  name: "character",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getCharactersAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(getCharactersAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.characters = action.payload.results;
        state.count = action.payload.info.count;
        state.pages = action.payload.info.pages;
        state.next = action.payload.info.next;
      })
      .addCase(getCharactersAsync.rejected, (state) => {
        state.status = "failed";
      });
  },
});

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCharacter = (state: RootState) => state.character;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const incrementIfOdd = (amount: number): AppThunk => (
  dispatch,
  getState
) => {};

export default characterSlice.reducer;
